// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url  	= "postgres://ngovindaraju:9KbFTX1pBwxS@ep-shy-king-05749295-pooler.us-west-2.aws.neon.tech/travel?pgbouncer=true&connect_timeout=10"
  directUrl = "postgres://ngovindaraju:9KbFTX1pBwxS@ep-shy-king-05749295.us-west-2.aws.neon.tech/travel?connect_timeout=10"
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String         
  preferences Preferences?
  trips       Trip[]
}

model UberUser {
  id          Int          @id @default(autoincrement())
  uberId      String       @unique
  uberAccessToken    String         
  uberRefreshToken    String
}

model Preferences {
  id            Int    @id @default(autoincrement())
  budget        Int
  safetyPriority Int
  speedPriority  Int
  userId        Int    @unique
  user          User   @relation(fields: [userId], references: [id])
}

model Route {
  id             Int     @id @default(autoincrement())
  start          String
  end            String
  cost           Int
  estimatedTime  DateTime
  details        String
}

model Trip {
  id               Int      @id @default(autoincrement())
  service_provider String   // "Uber", "Lyft", "VTA", etc.
  pickup_latitude  Float?
  pickup_longitude Float?
  dropoff_latitude Float?
  dropoff_longitude Float?
  duration         Int?     // Duration in seconds
  distance         Float?   // Distance in miles or kilometers
  cost_estimate    Float?   // Cost estimate provided by the service
  requested_at     DateTime // When the trip was requested
  started_at       DateTime? // When the trip actually started
  completed_at     DateTime? // When the trip was completed
  user_id          Int?     // If you want to relate trips to users
  User             User?    @relation(fields: [user_id], references: [id])

  @@map("trips")
}
